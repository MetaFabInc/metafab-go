/*
MetaFab API

 Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.2.1
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// BurnCollectionItemRequest struct for BurnCollectionItemRequest
type BurnCollectionItemRequest struct {
	// The quantity of the collectionItemId to burn.
	Quantity float32 `json:"quantity"`
}

// NewBurnCollectionItemRequest instantiates a new BurnCollectionItemRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBurnCollectionItemRequest(quantity float32) *BurnCollectionItemRequest {
	this := BurnCollectionItemRequest{}
	this.Quantity = quantity
	return &this
}

// NewBurnCollectionItemRequestWithDefaults instantiates a new BurnCollectionItemRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBurnCollectionItemRequestWithDefaults() *BurnCollectionItemRequest {
	this := BurnCollectionItemRequest{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *BurnCollectionItemRequest) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *BurnCollectionItemRequest) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *BurnCollectionItemRequest) SetQuantity(v float32) {
	o.Quantity = v
}

func (o BurnCollectionItemRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullableBurnCollectionItemRequest struct {
	value *BurnCollectionItemRequest
	isSet bool
}

func (v NullableBurnCollectionItemRequest) Get() *BurnCollectionItemRequest {
	return v.value
}

func (v *NullableBurnCollectionItemRequest) Set(val *BurnCollectionItemRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBurnCollectionItemRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBurnCollectionItemRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBurnCollectionItemRequest(val *BurnCollectionItemRequest) *NullableBurnCollectionItemRequest {
	return &NullableBurnCollectionItemRequest{value: val, isSet: true}
}

func (v NullableBurnCollectionItemRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBurnCollectionItemRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


