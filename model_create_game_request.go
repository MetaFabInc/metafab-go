/*
MetaFab API

 Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.3.0
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// CreateGameRequest struct for CreateGameRequest
type CreateGameRequest struct {
	// The name of the game you're creating.
	Name string `json:"name"`
	// The email address associated with this game and used to login/authenticate as the game.
	Email string `json:"email"`
	// The password to authenticate as the game. Additionally, this password is used to encrypt/decrypt your game's primary wallet and must be provided anytime this game makes blockchain interactions through various endpoints.
	Password string `json:"password"`
}

// NewCreateGameRequest instantiates a new CreateGameRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGameRequest(name string, email string, password string) *CreateGameRequest {
	this := CreateGameRequest{}
	this.Name = name
	this.Email = email
	this.Password = password
	return &this
}

// NewCreateGameRequestWithDefaults instantiates a new CreateGameRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGameRequestWithDefaults() *CreateGameRequest {
	this := CreateGameRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateGameRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateGameRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateGameRequest) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *CreateGameRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateGameRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateGameRequest) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *CreateGameRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateGameRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateGameRequest) SetPassword(v string) {
	o.Password = v
}

func (o CreateGameRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableCreateGameRequest struct {
	value *CreateGameRequest
	isSet bool
}

func (v NullableCreateGameRequest) Get() *CreateGameRequest {
	return v.value
}

func (v *NullableCreateGameRequest) Set(val *CreateGameRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGameRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGameRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGameRequest(val *CreateGameRequest) *NullableCreateGameRequest {
	return &NullableCreateGameRequest{value: val, isSet: true}
}

func (v NullableCreateGameRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGameRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


