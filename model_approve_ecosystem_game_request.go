/*
MetaFab API

Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.5.1
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// ApproveEcosystemGameRequest struct for ApproveEcosystemGameRequest
type ApproveEcosystemGameRequest struct {
	// The id of the game being approved.
	GameId string `json:"gameId"`
}

// NewApproveEcosystemGameRequest instantiates a new ApproveEcosystemGameRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproveEcosystemGameRequest(gameId string) *ApproveEcosystemGameRequest {
	this := ApproveEcosystemGameRequest{}
	this.GameId = gameId
	return &this
}

// NewApproveEcosystemGameRequestWithDefaults instantiates a new ApproveEcosystemGameRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproveEcosystemGameRequestWithDefaults() *ApproveEcosystemGameRequest {
	this := ApproveEcosystemGameRequest{}
	return &this
}

// GetGameId returns the GameId field value
func (o *ApproveEcosystemGameRequest) GetGameId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GameId
}

// GetGameIdOk returns a tuple with the GameId field value
// and a boolean to check if the value has been set.
func (o *ApproveEcosystemGameRequest) GetGameIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.GameId, true
}

// SetGameId sets field value
func (o *ApproveEcosystemGameRequest) SetGameId(v string) {
	o.GameId = v
}

func (o ApproveEcosystemGameRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gameId"] = o.GameId
	}
	return json.Marshal(toSerialize)
}

type NullableApproveEcosystemGameRequest struct {
	value *ApproveEcosystemGameRequest
	isSet bool
}

func (v NullableApproveEcosystemGameRequest) Get() *ApproveEcosystemGameRequest {
	return v.value
}

func (v *NullableApproveEcosystemGameRequest) Set(val *ApproveEcosystemGameRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApproveEcosystemGameRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApproveEcosystemGameRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproveEcosystemGameRequest(val *ApproveEcosystemGameRequest) *NullableApproveEcosystemGameRequest {
	return &NullableApproveEcosystemGameRequest{value: val, isSet: true}
}

func (v NullableApproveEcosystemGameRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproveEcosystemGameRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


