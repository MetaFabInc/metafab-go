/*
MetaFab API

Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.5.1
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// TransferCurrencyRequest struct for TransferCurrencyRequest
type TransferCurrencyRequest struct {
	// A valid EVM based address to transfer currency to. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
	Address *string `json:"address,omitempty"`
	// Any wallet id within the MetaFab ecosystem to transfer currency to.
	WalletId *string `json:"walletId,omitempty"`
	// The amount of currency to transfer.
	Amount float32 `json:"amount"`
	// An optional uint256 number to reference the transfer. Commonly used to identify transfers intended to pay for game items or services.
	Reference *float32 `json:"reference,omitempty"`
}

// NewTransferCurrencyRequest instantiates a new TransferCurrencyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferCurrencyRequest(amount float32) *TransferCurrencyRequest {
	this := TransferCurrencyRequest{}
	this.Amount = amount
	return &this
}

// NewTransferCurrencyRequestWithDefaults instantiates a new TransferCurrencyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferCurrencyRequestWithDefaults() *TransferCurrencyRequest {
	this := TransferCurrencyRequest{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *TransferCurrencyRequest) GetAddress() string {
	if o == nil || isNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCurrencyRequest) GetAddressOk() (*string, bool) {
	if o == nil || isNil(o.Address) {
    return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *TransferCurrencyRequest) HasAddress() bool {
	if o != nil && !isNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *TransferCurrencyRequest) SetAddress(v string) {
	o.Address = &v
}

// GetWalletId returns the WalletId field value if set, zero value otherwise.
func (o *TransferCurrencyRequest) GetWalletId() string {
	if o == nil || isNil(o.WalletId) {
		var ret string
		return ret
	}
	return *o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCurrencyRequest) GetWalletIdOk() (*string, bool) {
	if o == nil || isNil(o.WalletId) {
    return nil, false
	}
	return o.WalletId, true
}

// HasWalletId returns a boolean if a field has been set.
func (o *TransferCurrencyRequest) HasWalletId() bool {
	if o != nil && !isNil(o.WalletId) {
		return true
	}

	return false
}

// SetWalletId gets a reference to the given string and assigns it to the WalletId field.
func (o *TransferCurrencyRequest) SetWalletId(v string) {
	o.WalletId = &v
}

// GetAmount returns the Amount field value
func (o *TransferCurrencyRequest) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransferCurrencyRequest) GetAmountOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransferCurrencyRequest) SetAmount(v float32) {
	o.Amount = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransferCurrencyRequest) GetReference() float32 {
	if o == nil || isNil(o.Reference) {
		var ret float32
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCurrencyRequest) GetReferenceOk() (*float32, bool) {
	if o == nil || isNil(o.Reference) {
    return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransferCurrencyRequest) HasReference() bool {
	if o != nil && !isNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given float32 and assigns it to the Reference field.
func (o *TransferCurrencyRequest) SetReference(v float32) {
	o.Reference = &v
}

func (o TransferCurrencyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !isNil(o.WalletId) {
		toSerialize["walletId"] = o.WalletId
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if !isNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	return json.Marshal(toSerialize)
}

type NullableTransferCurrencyRequest struct {
	value *TransferCurrencyRequest
	isSet bool
}

func (v NullableTransferCurrencyRequest) Get() *TransferCurrencyRequest {
	return v.value
}

func (v *NullableTransferCurrencyRequest) Set(val *TransferCurrencyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferCurrencyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferCurrencyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferCurrencyRequest(val *TransferCurrencyRequest) *NullableTransferCurrencyRequest {
	return &NullableTransferCurrencyRequest{value: val, isSet: true}
}

func (v NullableTransferCurrencyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferCurrencyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


