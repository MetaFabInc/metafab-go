/*
MetaFab API

Testing ItemsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package metafab

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_metafab_ItemsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ItemsApiService BatchMintCollectionItems", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.BatchMintCollectionItems(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService BatchTransferCollectionItems", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.BatchTransferCollectionItems(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService BurnCollectionItem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string
        var collectionItemId float32

        resp, httpRes, err := apiClient.ItemsApi.BurnCollectionItem(context.Background(), collectionId, collectionItemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService CreateCollection", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ItemsApi.CreateCollection(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService CreateCollectionItem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.CreateCollectionItem(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollectionApproval", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.GetCollectionApproval(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollectionItem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string
        var collectionItemId float32

        resp, httpRes, err := apiClient.ItemsApi.GetCollectionItem(context.Background(), collectionId, collectionItemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollectionItemBalance", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string
        var collectionItemId float32

        resp, httpRes, err := apiClient.ItemsApi.GetCollectionItemBalance(context.Background(), collectionId, collectionItemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollectionItemBalances", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.GetCollectionItemBalances(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollectionItemSupplies", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.GetCollectionItemSupplies(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollectionItemSupply", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string
        var collectionItemId float32

        resp, httpRes, err := apiClient.ItemsApi.GetCollectionItemSupply(context.Background(), collectionId, collectionItemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollectionItemTimelock", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string
        var collectionItemId float32

        resp, httpRes, err := apiClient.ItemsApi.GetCollectionItemTimelock(context.Background(), collectionId, collectionItemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollectionItems", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.GetCollectionItems(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollectionRole", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.GetCollectionRole(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GetCollections", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ItemsApi.GetCollections(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService GrantCollectionRole", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.GrantCollectionRole(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService MintCollectionItem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string
        var collectionItemId float32

        resp, httpRes, err := apiClient.ItemsApi.MintCollectionItem(context.Background(), collectionId, collectionItemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService RevokeCollectionRole", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.RevokeCollectionRole(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService SetCollectionApproval", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string

        resp, httpRes, err := apiClient.ItemsApi.SetCollectionApproval(context.Background(), collectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService SetCollectionItemTimelock", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string
        var collectionItemId float32

        resp, httpRes, err := apiClient.ItemsApi.SetCollectionItemTimelock(context.Background(), collectionId, collectionItemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ItemsApiService TransferCollectionItem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var collectionId string
        var collectionItemId float32

        resp, httpRes, err := apiClient.ItemsApi.TransferCollectionItem(context.Background(), collectionId, collectionItemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
