/*
MetaFab API

Testing LootboxesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package metafab

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_metafab_LootboxesApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test LootboxesApiService CreateLootboxManager", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LootboxesApi.CreateLootboxManager(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LootboxesApiService GetLootboxManagerLootbox", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var lootboxManagerId string
        var lootboxManagerLootboxId string

        resp, httpRes, err := apiClient.LootboxesApi.GetLootboxManagerLootbox(context.Background(), lootboxManagerId, lootboxManagerLootboxId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LootboxesApiService GetLootboxManagerLootboxes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var lootboxManagerId string

        resp, httpRes, err := apiClient.LootboxesApi.GetLootboxManagerLootboxes(context.Background(), lootboxManagerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LootboxesApiService GetLootboxManagers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LootboxesApi.GetLootboxManagers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LootboxesApiService OpenLootboxManagerLootbox", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var lootboxManagerId string
        var lootboxManagerLootboxId string

        resp, httpRes, err := apiClient.LootboxesApi.OpenLootboxManagerLootbox(context.Background(), lootboxManagerId, lootboxManagerLootboxId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LootboxesApiService RemoveLootboxManagerLootbox", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var lootboxManagerId string
        var lootboxManagerLootboxId string

        resp, httpRes, err := apiClient.LootboxesApi.RemoveLootboxManagerLootbox(context.Background(), lootboxManagerId, lootboxManagerLootboxId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LootboxesApiService SetLootboxManagerLootbox", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var lootboxManagerId string

        resp, httpRes, err := apiClient.LootboxesApi.SetLootboxManagerLootbox(context.Background(), lootboxManagerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
