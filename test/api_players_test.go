/*
MetaFab API

Testing PlayersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package metafab

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_metafab_PlayersApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test PlayersApiService AuthPlayer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PlayersApi.AuthPlayer(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService CreatePlayer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PlayersApi.CreatePlayer(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService GetPlayer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId string

        resp, httpRes, err := apiClient.PlayersApi.GetPlayer(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService GetPlayerData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId string

        resp, httpRes, err := apiClient.PlayersApi.GetPlayerData(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService GetPlayers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PlayersApi.GetPlayers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService SetPlayerData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId string

        resp, httpRes, err := apiClient.PlayersApi.SetPlayerData(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService UpdatePlayer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId string

        resp, httpRes, err := apiClient.PlayersApi.UpdatePlayer(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
