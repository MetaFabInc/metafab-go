/*
MetaFab API

Testing EcosystemsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package metafab

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_metafab_EcosystemsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test EcosystemsApiService ApproveEcosystemGame", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ecosystemId string

        resp, httpRes, err := apiClient.EcosystemsApi.ApproveEcosystemGame(context.Background(), ecosystemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService AuthEcosystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EcosystemsApi.AuthEcosystem(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService AuthProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EcosystemsApi.AuthProfile(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService AuthProfilePlayer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var gameId string

        resp, httpRes, err := apiClient.EcosystemsApi.AuthProfilePlayer(context.Background(), profileId, gameId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService CreateEcosystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EcosystemsApi.CreateEcosystem(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService CreateProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EcosystemsApi.CreateProfile(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService CreateProfilePlayer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var gameId string

        resp, httpRes, err := apiClient.EcosystemsApi.CreateProfilePlayer(context.Background(), profileId, gameId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService GetEcosystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ecosystemId string

        resp, httpRes, err := apiClient.EcosystemsApi.GetEcosystem(context.Background(), ecosystemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService GetEcosystemGame", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ecosystemId string
        var gameId string

        resp, httpRes, err := apiClient.EcosystemsApi.GetEcosystemGame(context.Background(), ecosystemId, gameId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService GetEcosystemGames", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ecosystemId string

        resp, httpRes, err := apiClient.EcosystemsApi.GetEcosystemGames(context.Background(), ecosystemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService GetProfileGame", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var gameId string

        resp, httpRes, err := apiClient.EcosystemsApi.GetProfileGame(context.Background(), profileId, gameId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService GetProfileGames", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.EcosystemsApi.GetProfileGames(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService UnapproveEcosystemGame", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ecosystemId string
        var gameId string

        resp, httpRes, err := apiClient.EcosystemsApi.UnapproveEcosystemGame(context.Background(), ecosystemId, gameId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService UpdateEcosystem", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ecosystemId string

        resp, httpRes, err := apiClient.EcosystemsApi.UpdateEcosystem(context.Background(), ecosystemId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService UpdateProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string

        resp, httpRes, err := apiClient.EcosystemsApi.UpdateProfile(context.Background(), profileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EcosystemsApiService UpdateProfilePlayer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var profileId string
        var gameId string
        var playerId string

        resp, httpRes, err := apiClient.EcosystemsApi.UpdateProfilePlayer(context.Background(), profileId, gameId, playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
