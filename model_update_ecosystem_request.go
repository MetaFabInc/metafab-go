/*
MetaFab API

Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.5.1
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// UpdateEcosystemRequest struct for UpdateEcosystemRequest
type UpdateEcosystemRequest struct {
	// A new name. Replaces the ecosystem's current name.
	Name *string `json:"name,omitempty"`
	// A new email address. The ecosystem's old email will no longer be valid for account authentication. `currentPassword` must also be provided.
	Email *string `json:"email,omitempty"`
	// The ecosystem's current password. Must be provided if setting `newPassword` or `email`.
	CurrentPassword *string `json:"currentPassword,omitempty"`
	// A new password. The ecosystem's old password will no longer be valid.
	NewPassword *string `json:"newPassword,omitempty"`
	// A base64 string of the icon image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif` Recommended size is 512x512 pixels, or 1:1 aspect ratio. This image is used for your profile authorization flow and other MetaFab features for your ecosystem.
	IconImageBase64 *string `json:"iconImageBase64,omitempty"`
	// A base64 string of the cover image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size is 1600x1000 pixels, or 16:10 aspect ratio.  This image is used as the background image for your profile authorization flow and other MetaFab features for your ecosystem.
	CoverImageBase64 *string `json:"coverImageBase64,omitempty"`
	// A valid hex color code. This color is used for your profile authorization flow to control the color of buttons and other brandable MetaFab features for your ecosystem.
	PrimaryColorHex *string `json:"primaryColorHex,omitempty"`
	// Revokes the ecosystem's previous published key and returns a new one if true.
	ResetPublishedKey *bool `json:"resetPublishedKey,omitempty"`
	// Revokes the ecosystem's previous secret key and returns a new on if true.
	ResetSecretKey *bool `json:"resetSecretKey,omitempty"`
}

// NewUpdateEcosystemRequest instantiates a new UpdateEcosystemRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEcosystemRequest() *UpdateEcosystemRequest {
	this := UpdateEcosystemRequest{}
	return &this
}

// NewUpdateEcosystemRequestWithDefaults instantiates a new UpdateEcosystemRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEcosystemRequestWithDefaults() *UpdateEcosystemRequest {
	this := UpdateEcosystemRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateEcosystemRequest) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEcosystemRequest) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateEcosystemRequest) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateEcosystemRequest) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateEcosystemRequest) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEcosystemRequest) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
    return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateEcosystemRequest) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateEcosystemRequest) SetEmail(v string) {
	o.Email = &v
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise.
func (o *UpdateEcosystemRequest) GetCurrentPassword() string {
	if o == nil || isNil(o.CurrentPassword) {
		var ret string
		return ret
	}
	return *o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEcosystemRequest) GetCurrentPasswordOk() (*string, bool) {
	if o == nil || isNil(o.CurrentPassword) {
    return nil, false
	}
	return o.CurrentPassword, true
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *UpdateEcosystemRequest) HasCurrentPassword() bool {
	if o != nil && !isNil(o.CurrentPassword) {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given string and assigns it to the CurrentPassword field.
func (o *UpdateEcosystemRequest) SetCurrentPassword(v string) {
	o.CurrentPassword = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *UpdateEcosystemRequest) GetNewPassword() string {
	if o == nil || isNil(o.NewPassword) {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEcosystemRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil || isNil(o.NewPassword) {
    return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UpdateEcosystemRequest) HasNewPassword() bool {
	if o != nil && !isNil(o.NewPassword) {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *UpdateEcosystemRequest) SetNewPassword(v string) {
	o.NewPassword = &v
}

// GetIconImageBase64 returns the IconImageBase64 field value if set, zero value otherwise.
func (o *UpdateEcosystemRequest) GetIconImageBase64() string {
	if o == nil || isNil(o.IconImageBase64) {
		var ret string
		return ret
	}
	return *o.IconImageBase64
}

// GetIconImageBase64Ok returns a tuple with the IconImageBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEcosystemRequest) GetIconImageBase64Ok() (*string, bool) {
	if o == nil || isNil(o.IconImageBase64) {
    return nil, false
	}
	return o.IconImageBase64, true
}

// HasIconImageBase64 returns a boolean if a field has been set.
func (o *UpdateEcosystemRequest) HasIconImageBase64() bool {
	if o != nil && !isNil(o.IconImageBase64) {
		return true
	}

	return false
}

// SetIconImageBase64 gets a reference to the given string and assigns it to the IconImageBase64 field.
func (o *UpdateEcosystemRequest) SetIconImageBase64(v string) {
	o.IconImageBase64 = &v
}

// GetCoverImageBase64 returns the CoverImageBase64 field value if set, zero value otherwise.
func (o *UpdateEcosystemRequest) GetCoverImageBase64() string {
	if o == nil || isNil(o.CoverImageBase64) {
		var ret string
		return ret
	}
	return *o.CoverImageBase64
}

// GetCoverImageBase64Ok returns a tuple with the CoverImageBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEcosystemRequest) GetCoverImageBase64Ok() (*string, bool) {
	if o == nil || isNil(o.CoverImageBase64) {
    return nil, false
	}
	return o.CoverImageBase64, true
}

// HasCoverImageBase64 returns a boolean if a field has been set.
func (o *UpdateEcosystemRequest) HasCoverImageBase64() bool {
	if o != nil && !isNil(o.CoverImageBase64) {
		return true
	}

	return false
}

// SetCoverImageBase64 gets a reference to the given string and assigns it to the CoverImageBase64 field.
func (o *UpdateEcosystemRequest) SetCoverImageBase64(v string) {
	o.CoverImageBase64 = &v
}

// GetPrimaryColorHex returns the PrimaryColorHex field value if set, zero value otherwise.
func (o *UpdateEcosystemRequest) GetPrimaryColorHex() string {
	if o == nil || isNil(o.PrimaryColorHex) {
		var ret string
		return ret
	}
	return *o.PrimaryColorHex
}

// GetPrimaryColorHexOk returns a tuple with the PrimaryColorHex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEcosystemRequest) GetPrimaryColorHexOk() (*string, bool) {
	if o == nil || isNil(o.PrimaryColorHex) {
    return nil, false
	}
	return o.PrimaryColorHex, true
}

// HasPrimaryColorHex returns a boolean if a field has been set.
func (o *UpdateEcosystemRequest) HasPrimaryColorHex() bool {
	if o != nil && !isNil(o.PrimaryColorHex) {
		return true
	}

	return false
}

// SetPrimaryColorHex gets a reference to the given string and assigns it to the PrimaryColorHex field.
func (o *UpdateEcosystemRequest) SetPrimaryColorHex(v string) {
	o.PrimaryColorHex = &v
}

// GetResetPublishedKey returns the ResetPublishedKey field value if set, zero value otherwise.
func (o *UpdateEcosystemRequest) GetResetPublishedKey() bool {
	if o == nil || isNil(o.ResetPublishedKey) {
		var ret bool
		return ret
	}
	return *o.ResetPublishedKey
}

// GetResetPublishedKeyOk returns a tuple with the ResetPublishedKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEcosystemRequest) GetResetPublishedKeyOk() (*bool, bool) {
	if o == nil || isNil(o.ResetPublishedKey) {
    return nil, false
	}
	return o.ResetPublishedKey, true
}

// HasResetPublishedKey returns a boolean if a field has been set.
func (o *UpdateEcosystemRequest) HasResetPublishedKey() bool {
	if o != nil && !isNil(o.ResetPublishedKey) {
		return true
	}

	return false
}

// SetResetPublishedKey gets a reference to the given bool and assigns it to the ResetPublishedKey field.
func (o *UpdateEcosystemRequest) SetResetPublishedKey(v bool) {
	o.ResetPublishedKey = &v
}

// GetResetSecretKey returns the ResetSecretKey field value if set, zero value otherwise.
func (o *UpdateEcosystemRequest) GetResetSecretKey() bool {
	if o == nil || isNil(o.ResetSecretKey) {
		var ret bool
		return ret
	}
	return *o.ResetSecretKey
}

// GetResetSecretKeyOk returns a tuple with the ResetSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEcosystemRequest) GetResetSecretKeyOk() (*bool, bool) {
	if o == nil || isNil(o.ResetSecretKey) {
    return nil, false
	}
	return o.ResetSecretKey, true
}

// HasResetSecretKey returns a boolean if a field has been set.
func (o *UpdateEcosystemRequest) HasResetSecretKey() bool {
	if o != nil && !isNil(o.ResetSecretKey) {
		return true
	}

	return false
}

// SetResetSecretKey gets a reference to the given bool and assigns it to the ResetSecretKey field.
func (o *UpdateEcosystemRequest) SetResetSecretKey(v bool) {
	o.ResetSecretKey = &v
}

func (o UpdateEcosystemRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.CurrentPassword) {
		toSerialize["currentPassword"] = o.CurrentPassword
	}
	if !isNil(o.NewPassword) {
		toSerialize["newPassword"] = o.NewPassword
	}
	if !isNil(o.IconImageBase64) {
		toSerialize["iconImageBase64"] = o.IconImageBase64
	}
	if !isNil(o.CoverImageBase64) {
		toSerialize["coverImageBase64"] = o.CoverImageBase64
	}
	if !isNil(o.PrimaryColorHex) {
		toSerialize["primaryColorHex"] = o.PrimaryColorHex
	}
	if !isNil(o.ResetPublishedKey) {
		toSerialize["resetPublishedKey"] = o.ResetPublishedKey
	}
	if !isNil(o.ResetSecretKey) {
		toSerialize["resetSecretKey"] = o.ResetSecretKey
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateEcosystemRequest struct {
	value *UpdateEcosystemRequest
	isSet bool
}

func (v NullableUpdateEcosystemRequest) Get() *UpdateEcosystemRequest {
	return v.value
}

func (v *NullableUpdateEcosystemRequest) Set(val *UpdateEcosystemRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEcosystemRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEcosystemRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEcosystemRequest(val *UpdateEcosystemRequest) *NullableUpdateEcosystemRequest {
	return &NullableUpdateEcosystemRequest{value: val, isSet: true}
}

func (v NullableUpdateEcosystemRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEcosystemRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


