/*
MetaFab API

 Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.2.1
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// ExchangeOffer struct for ExchangeOffer
type ExchangeOffer struct {
	// The id of this offer.
	Id *float32 `json:"id,omitempty"`
	// The address of the ERC1155 of MetaFab game items contract for input items required by this offer.
	InputCollection *string `json:"inputCollection,omitempty"`
	// An array of item ids from the input collection that are required for this offer.
	InputCollectionItemIds []float32 `json:"inputCollectionItemIds,omitempty"`
	// An array of amounts for each item id for the input collection that are required to use this offer.
	InputCollectionItemAmounts []float32 `json:"inputCollectionItemAmounts,omitempty"`
	// The address of the ERC20 or MetaFab game currency for the currency required by this offer.
	InputCurrency *string `json:"inputCurrency,omitempty"`
	// The amount of currency required by this offer.
	InputCurrencyAmount *float32 `json:"inputCurrencyAmount,omitempty"`
	// The address of the ERC1155 of MetaFab game items contract for output items given by this offer.
	OutputCollection *string `json:"outputCollection,omitempty"`
	// An array of item ids from the output collection that are given for this offer.
	OutputCollectionItemIds []float32 `json:"outputCollectionItemIds,omitempty"`
	// An array of amounts for each item id for the output collection that are given by this offer.
	OutputCollectionItemAmounts []float32 `json:"outputCollectionItemAmounts,omitempty"`
	// The address of the ERC20 or MetaFab game currency for the output currency given by this offer.
	OutputCurrency *string `json:"outputCurrency,omitempty"`
	// The amount of currency given by this offer.
	OutputCurrencyAmount *float32 `json:"outputCurrencyAmount,omitempty"`
	// The number of times this offer has been used.
	Uses *float32 `json:"uses,omitempty"`
	// The maximum number of times this offer can be used. A value of `0` means there is no limit on how many times this offer can be used.
	MaxUses *float32 `json:"maxUses,omitempty"`
	// A unix timestamp in seconds that represents the last time this offer was set or updated.
	LastUpdatedAt *float32 `json:"lastUpdatedAt,omitempty"`
}

// NewExchangeOffer instantiates a new ExchangeOffer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeOffer() *ExchangeOffer {
	this := ExchangeOffer{}
	return &this
}

// NewExchangeOfferWithDefaults instantiates a new ExchangeOffer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeOfferWithDefaults() *ExchangeOffer {
	this := ExchangeOffer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExchangeOffer) GetId() float32 {
	if o == nil || o.Id == nil {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetIdOk() (*float32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExchangeOffer) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *ExchangeOffer) SetId(v float32) {
	o.Id = &v
}

// GetInputCollection returns the InputCollection field value if set, zero value otherwise.
func (o *ExchangeOffer) GetInputCollection() string {
	if o == nil || o.InputCollection == nil {
		var ret string
		return ret
	}
	return *o.InputCollection
}

// GetInputCollectionOk returns a tuple with the InputCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetInputCollectionOk() (*string, bool) {
	if o == nil || o.InputCollection == nil {
		return nil, false
	}
	return o.InputCollection, true
}

// HasInputCollection returns a boolean if a field has been set.
func (o *ExchangeOffer) HasInputCollection() bool {
	if o != nil && o.InputCollection != nil {
		return true
	}

	return false
}

// SetInputCollection gets a reference to the given string and assigns it to the InputCollection field.
func (o *ExchangeOffer) SetInputCollection(v string) {
	o.InputCollection = &v
}

// GetInputCollectionItemIds returns the InputCollectionItemIds field value if set, zero value otherwise.
func (o *ExchangeOffer) GetInputCollectionItemIds() []float32 {
	if o == nil || o.InputCollectionItemIds == nil {
		var ret []float32
		return ret
	}
	return o.InputCollectionItemIds
}

// GetInputCollectionItemIdsOk returns a tuple with the InputCollectionItemIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetInputCollectionItemIdsOk() ([]float32, bool) {
	if o == nil || o.InputCollectionItemIds == nil {
		return nil, false
	}
	return o.InputCollectionItemIds, true
}

// HasInputCollectionItemIds returns a boolean if a field has been set.
func (o *ExchangeOffer) HasInputCollectionItemIds() bool {
	if o != nil && o.InputCollectionItemIds != nil {
		return true
	}

	return false
}

// SetInputCollectionItemIds gets a reference to the given []float32 and assigns it to the InputCollectionItemIds field.
func (o *ExchangeOffer) SetInputCollectionItemIds(v []float32) {
	o.InputCollectionItemIds = v
}

// GetInputCollectionItemAmounts returns the InputCollectionItemAmounts field value if set, zero value otherwise.
func (o *ExchangeOffer) GetInputCollectionItemAmounts() []float32 {
	if o == nil || o.InputCollectionItemAmounts == nil {
		var ret []float32
		return ret
	}
	return o.InputCollectionItemAmounts
}

// GetInputCollectionItemAmountsOk returns a tuple with the InputCollectionItemAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetInputCollectionItemAmountsOk() ([]float32, bool) {
	if o == nil || o.InputCollectionItemAmounts == nil {
		return nil, false
	}
	return o.InputCollectionItemAmounts, true
}

// HasInputCollectionItemAmounts returns a boolean if a field has been set.
func (o *ExchangeOffer) HasInputCollectionItemAmounts() bool {
	if o != nil && o.InputCollectionItemAmounts != nil {
		return true
	}

	return false
}

// SetInputCollectionItemAmounts gets a reference to the given []float32 and assigns it to the InputCollectionItemAmounts field.
func (o *ExchangeOffer) SetInputCollectionItemAmounts(v []float32) {
	o.InputCollectionItemAmounts = v
}

// GetInputCurrency returns the InputCurrency field value if set, zero value otherwise.
func (o *ExchangeOffer) GetInputCurrency() string {
	if o == nil || o.InputCurrency == nil {
		var ret string
		return ret
	}
	return *o.InputCurrency
}

// GetInputCurrencyOk returns a tuple with the InputCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetInputCurrencyOk() (*string, bool) {
	if o == nil || o.InputCurrency == nil {
		return nil, false
	}
	return o.InputCurrency, true
}

// HasInputCurrency returns a boolean if a field has been set.
func (o *ExchangeOffer) HasInputCurrency() bool {
	if o != nil && o.InputCurrency != nil {
		return true
	}

	return false
}

// SetInputCurrency gets a reference to the given string and assigns it to the InputCurrency field.
func (o *ExchangeOffer) SetInputCurrency(v string) {
	o.InputCurrency = &v
}

// GetInputCurrencyAmount returns the InputCurrencyAmount field value if set, zero value otherwise.
func (o *ExchangeOffer) GetInputCurrencyAmount() float32 {
	if o == nil || o.InputCurrencyAmount == nil {
		var ret float32
		return ret
	}
	return *o.InputCurrencyAmount
}

// GetInputCurrencyAmountOk returns a tuple with the InputCurrencyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetInputCurrencyAmountOk() (*float32, bool) {
	if o == nil || o.InputCurrencyAmount == nil {
		return nil, false
	}
	return o.InputCurrencyAmount, true
}

// HasInputCurrencyAmount returns a boolean if a field has been set.
func (o *ExchangeOffer) HasInputCurrencyAmount() bool {
	if o != nil && o.InputCurrencyAmount != nil {
		return true
	}

	return false
}

// SetInputCurrencyAmount gets a reference to the given float32 and assigns it to the InputCurrencyAmount field.
func (o *ExchangeOffer) SetInputCurrencyAmount(v float32) {
	o.InputCurrencyAmount = &v
}

// GetOutputCollection returns the OutputCollection field value if set, zero value otherwise.
func (o *ExchangeOffer) GetOutputCollection() string {
	if o == nil || o.OutputCollection == nil {
		var ret string
		return ret
	}
	return *o.OutputCollection
}

// GetOutputCollectionOk returns a tuple with the OutputCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetOutputCollectionOk() (*string, bool) {
	if o == nil || o.OutputCollection == nil {
		return nil, false
	}
	return o.OutputCollection, true
}

// HasOutputCollection returns a boolean if a field has been set.
func (o *ExchangeOffer) HasOutputCollection() bool {
	if o != nil && o.OutputCollection != nil {
		return true
	}

	return false
}

// SetOutputCollection gets a reference to the given string and assigns it to the OutputCollection field.
func (o *ExchangeOffer) SetOutputCollection(v string) {
	o.OutputCollection = &v
}

// GetOutputCollectionItemIds returns the OutputCollectionItemIds field value if set, zero value otherwise.
func (o *ExchangeOffer) GetOutputCollectionItemIds() []float32 {
	if o == nil || o.OutputCollectionItemIds == nil {
		var ret []float32
		return ret
	}
	return o.OutputCollectionItemIds
}

// GetOutputCollectionItemIdsOk returns a tuple with the OutputCollectionItemIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetOutputCollectionItemIdsOk() ([]float32, bool) {
	if o == nil || o.OutputCollectionItemIds == nil {
		return nil, false
	}
	return o.OutputCollectionItemIds, true
}

// HasOutputCollectionItemIds returns a boolean if a field has been set.
func (o *ExchangeOffer) HasOutputCollectionItemIds() bool {
	if o != nil && o.OutputCollectionItemIds != nil {
		return true
	}

	return false
}

// SetOutputCollectionItemIds gets a reference to the given []float32 and assigns it to the OutputCollectionItemIds field.
func (o *ExchangeOffer) SetOutputCollectionItemIds(v []float32) {
	o.OutputCollectionItemIds = v
}

// GetOutputCollectionItemAmounts returns the OutputCollectionItemAmounts field value if set, zero value otherwise.
func (o *ExchangeOffer) GetOutputCollectionItemAmounts() []float32 {
	if o == nil || o.OutputCollectionItemAmounts == nil {
		var ret []float32
		return ret
	}
	return o.OutputCollectionItemAmounts
}

// GetOutputCollectionItemAmountsOk returns a tuple with the OutputCollectionItemAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetOutputCollectionItemAmountsOk() ([]float32, bool) {
	if o == nil || o.OutputCollectionItemAmounts == nil {
		return nil, false
	}
	return o.OutputCollectionItemAmounts, true
}

// HasOutputCollectionItemAmounts returns a boolean if a field has been set.
func (o *ExchangeOffer) HasOutputCollectionItemAmounts() bool {
	if o != nil && o.OutputCollectionItemAmounts != nil {
		return true
	}

	return false
}

// SetOutputCollectionItemAmounts gets a reference to the given []float32 and assigns it to the OutputCollectionItemAmounts field.
func (o *ExchangeOffer) SetOutputCollectionItemAmounts(v []float32) {
	o.OutputCollectionItemAmounts = v
}

// GetOutputCurrency returns the OutputCurrency field value if set, zero value otherwise.
func (o *ExchangeOffer) GetOutputCurrency() string {
	if o == nil || o.OutputCurrency == nil {
		var ret string
		return ret
	}
	return *o.OutputCurrency
}

// GetOutputCurrencyOk returns a tuple with the OutputCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetOutputCurrencyOk() (*string, bool) {
	if o == nil || o.OutputCurrency == nil {
		return nil, false
	}
	return o.OutputCurrency, true
}

// HasOutputCurrency returns a boolean if a field has been set.
func (o *ExchangeOffer) HasOutputCurrency() bool {
	if o != nil && o.OutputCurrency != nil {
		return true
	}

	return false
}

// SetOutputCurrency gets a reference to the given string and assigns it to the OutputCurrency field.
func (o *ExchangeOffer) SetOutputCurrency(v string) {
	o.OutputCurrency = &v
}

// GetOutputCurrencyAmount returns the OutputCurrencyAmount field value if set, zero value otherwise.
func (o *ExchangeOffer) GetOutputCurrencyAmount() float32 {
	if o == nil || o.OutputCurrencyAmount == nil {
		var ret float32
		return ret
	}
	return *o.OutputCurrencyAmount
}

// GetOutputCurrencyAmountOk returns a tuple with the OutputCurrencyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetOutputCurrencyAmountOk() (*float32, bool) {
	if o == nil || o.OutputCurrencyAmount == nil {
		return nil, false
	}
	return o.OutputCurrencyAmount, true
}

// HasOutputCurrencyAmount returns a boolean if a field has been set.
func (o *ExchangeOffer) HasOutputCurrencyAmount() bool {
	if o != nil && o.OutputCurrencyAmount != nil {
		return true
	}

	return false
}

// SetOutputCurrencyAmount gets a reference to the given float32 and assigns it to the OutputCurrencyAmount field.
func (o *ExchangeOffer) SetOutputCurrencyAmount(v float32) {
	o.OutputCurrencyAmount = &v
}

// GetUses returns the Uses field value if set, zero value otherwise.
func (o *ExchangeOffer) GetUses() float32 {
	if o == nil || o.Uses == nil {
		var ret float32
		return ret
	}
	return *o.Uses
}

// GetUsesOk returns a tuple with the Uses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetUsesOk() (*float32, bool) {
	if o == nil || o.Uses == nil {
		return nil, false
	}
	return o.Uses, true
}

// HasUses returns a boolean if a field has been set.
func (o *ExchangeOffer) HasUses() bool {
	if o != nil && o.Uses != nil {
		return true
	}

	return false
}

// SetUses gets a reference to the given float32 and assigns it to the Uses field.
func (o *ExchangeOffer) SetUses(v float32) {
	o.Uses = &v
}

// GetMaxUses returns the MaxUses field value if set, zero value otherwise.
func (o *ExchangeOffer) GetMaxUses() float32 {
	if o == nil || o.MaxUses == nil {
		var ret float32
		return ret
	}
	return *o.MaxUses
}

// GetMaxUsesOk returns a tuple with the MaxUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetMaxUsesOk() (*float32, bool) {
	if o == nil || o.MaxUses == nil {
		return nil, false
	}
	return o.MaxUses, true
}

// HasMaxUses returns a boolean if a field has been set.
func (o *ExchangeOffer) HasMaxUses() bool {
	if o != nil && o.MaxUses != nil {
		return true
	}

	return false
}

// SetMaxUses gets a reference to the given float32 and assigns it to the MaxUses field.
func (o *ExchangeOffer) SetMaxUses(v float32) {
	o.MaxUses = &v
}

// GetLastUpdatedAt returns the LastUpdatedAt field value if set, zero value otherwise.
func (o *ExchangeOffer) GetLastUpdatedAt() float32 {
	if o == nil || o.LastUpdatedAt == nil {
		var ret float32
		return ret
	}
	return *o.LastUpdatedAt
}

// GetLastUpdatedAtOk returns a tuple with the LastUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeOffer) GetLastUpdatedAtOk() (*float32, bool) {
	if o == nil || o.LastUpdatedAt == nil {
		return nil, false
	}
	return o.LastUpdatedAt, true
}

// HasLastUpdatedAt returns a boolean if a field has been set.
func (o *ExchangeOffer) HasLastUpdatedAt() bool {
	if o != nil && o.LastUpdatedAt != nil {
		return true
	}

	return false
}

// SetLastUpdatedAt gets a reference to the given float32 and assigns it to the LastUpdatedAt field.
func (o *ExchangeOffer) SetLastUpdatedAt(v float32) {
	o.LastUpdatedAt = &v
}

func (o ExchangeOffer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.InputCollection != nil {
		toSerialize["inputCollection"] = o.InputCollection
	}
	if o.InputCollectionItemIds != nil {
		toSerialize["inputCollectionItemIds"] = o.InputCollectionItemIds
	}
	if o.InputCollectionItemAmounts != nil {
		toSerialize["inputCollectionItemAmounts"] = o.InputCollectionItemAmounts
	}
	if o.InputCurrency != nil {
		toSerialize["inputCurrency"] = o.InputCurrency
	}
	if o.InputCurrencyAmount != nil {
		toSerialize["inputCurrencyAmount"] = o.InputCurrencyAmount
	}
	if o.OutputCollection != nil {
		toSerialize["outputCollection"] = o.OutputCollection
	}
	if o.OutputCollectionItemIds != nil {
		toSerialize["outputCollectionItemIds"] = o.OutputCollectionItemIds
	}
	if o.OutputCollectionItemAmounts != nil {
		toSerialize["outputCollectionItemAmounts"] = o.OutputCollectionItemAmounts
	}
	if o.OutputCurrency != nil {
		toSerialize["outputCurrency"] = o.OutputCurrency
	}
	if o.OutputCurrencyAmount != nil {
		toSerialize["outputCurrencyAmount"] = o.OutputCurrencyAmount
	}
	if o.Uses != nil {
		toSerialize["uses"] = o.Uses
	}
	if o.MaxUses != nil {
		toSerialize["maxUses"] = o.MaxUses
	}
	if o.LastUpdatedAt != nil {
		toSerialize["lastUpdatedAt"] = o.LastUpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeOffer struct {
	value *ExchangeOffer
	isSet bool
}

func (v NullableExchangeOffer) Get() *ExchangeOffer {
	return v.value
}

func (v *NullableExchangeOffer) Set(val *ExchangeOffer) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeOffer) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeOffer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeOffer(val *ExchangeOffer) *NullableExchangeOffer {
	return &NullableExchangeOffer{value: val, isSet: true}
}

func (v NullableExchangeOffer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeOffer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


