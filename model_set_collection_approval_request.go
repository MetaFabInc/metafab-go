/*
MetaFab API

 Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.4.0
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// SetCollectionApprovalRequest struct for SetCollectionApprovalRequest
type SetCollectionApprovalRequest struct {
	// A true or false value approves or disapproves the provided address or address associated with the provided walletId.
	Approved bool `json:"approved"`
	// A valid EVM based address to allow control over the authenticating game or player's wallet items for this collection.
	Address *string `json:"address,omitempty"`
	// A wallet id within the MetaFab ecosystem to allow control over the authenticating game or player's wallet items for this collection.
	WalletId []string `json:"walletId,omitempty"`
}

// NewSetCollectionApprovalRequest instantiates a new SetCollectionApprovalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetCollectionApprovalRequest(approved bool) *SetCollectionApprovalRequest {
	this := SetCollectionApprovalRequest{}
	this.Approved = approved
	return &this
}

// NewSetCollectionApprovalRequestWithDefaults instantiates a new SetCollectionApprovalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetCollectionApprovalRequestWithDefaults() *SetCollectionApprovalRequest {
	this := SetCollectionApprovalRequest{}
	return &this
}

// GetApproved returns the Approved field value
func (o *SetCollectionApprovalRequest) GetApproved() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Approved
}

// GetApprovedOk returns a tuple with the Approved field value
// and a boolean to check if the value has been set.
func (o *SetCollectionApprovalRequest) GetApprovedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Approved, true
}

// SetApproved sets field value
func (o *SetCollectionApprovalRequest) SetApproved(v bool) {
	o.Approved = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SetCollectionApprovalRequest) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetCollectionApprovalRequest) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SetCollectionApprovalRequest) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *SetCollectionApprovalRequest) SetAddress(v string) {
	o.Address = &v
}

// GetWalletId returns the WalletId field value if set, zero value otherwise.
func (o *SetCollectionApprovalRequest) GetWalletId() []string {
	if o == nil || o.WalletId == nil {
		var ret []string
		return ret
	}
	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetCollectionApprovalRequest) GetWalletIdOk() ([]string, bool) {
	if o == nil || o.WalletId == nil {
		return nil, false
	}
	return o.WalletId, true
}

// HasWalletId returns a boolean if a field has been set.
func (o *SetCollectionApprovalRequest) HasWalletId() bool {
	if o != nil && o.WalletId != nil {
		return true
	}

	return false
}

// SetWalletId gets a reference to the given []string and assigns it to the WalletId field.
func (o *SetCollectionApprovalRequest) SetWalletId(v []string) {
	o.WalletId = v
}

func (o SetCollectionApprovalRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["approved"] = o.Approved
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.WalletId != nil {
		toSerialize["walletId"] = o.WalletId
	}
	return json.Marshal(toSerialize)
}

type NullableSetCollectionApprovalRequest struct {
	value *SetCollectionApprovalRequest
	isSet bool
}

func (v NullableSetCollectionApprovalRequest) Get() *SetCollectionApprovalRequest {
	return v.value
}

func (v *NullableSetCollectionApprovalRequest) Set(val *SetCollectionApprovalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetCollectionApprovalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetCollectionApprovalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetCollectionApprovalRequest(val *SetCollectionApprovalRequest) *NullableSetCollectionApprovalRequest {
	return &NullableSetCollectionApprovalRequest{value: val, isSet: true}
}

func (v NullableSetCollectionApprovalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetCollectionApprovalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


