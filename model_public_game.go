/*
MetaFab API

 Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.3.0
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// PublicGame struct for PublicGame
type PublicGame struct {
	// This field has not had a description added.
	Id *string `json:"id,omitempty"`
	// This field has not had a description added.
	Name *string `json:"name,omitempty"`
	// This field has not had a description added.
	PublishedKey *string `json:"publishedKey,omitempty"`
	// This field has not had a description added.
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// This field has not had a description added.
	CreatedAt *string `json:"createdAt,omitempty"`
}

// NewPublicGame instantiates a new PublicGame object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicGame() *PublicGame {
	this := PublicGame{}
	return &this
}

// NewPublicGameWithDefaults instantiates a new PublicGame object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicGameWithDefaults() *PublicGame {
	this := PublicGame{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PublicGame) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicGame) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PublicGame) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PublicGame) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PublicGame) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicGame) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PublicGame) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PublicGame) SetName(v string) {
	o.Name = &v
}

// GetPublishedKey returns the PublishedKey field value if set, zero value otherwise.
func (o *PublicGame) GetPublishedKey() string {
	if o == nil || o.PublishedKey == nil {
		var ret string
		return ret
	}
	return *o.PublishedKey
}

// GetPublishedKeyOk returns a tuple with the PublishedKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicGame) GetPublishedKeyOk() (*string, bool) {
	if o == nil || o.PublishedKey == nil {
		return nil, false
	}
	return o.PublishedKey, true
}

// HasPublishedKey returns a boolean if a field has been set.
func (o *PublicGame) HasPublishedKey() bool {
	if o != nil && o.PublishedKey != nil {
		return true
	}

	return false
}

// SetPublishedKey gets a reference to the given string and assigns it to the PublishedKey field.
func (o *PublicGame) SetPublishedKey(v string) {
	o.PublishedKey = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PublicGame) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicGame) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PublicGame) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *PublicGame) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PublicGame) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicGame) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PublicGame) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *PublicGame) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

func (o PublicGame) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PublishedKey != nil {
		toSerialize["publishedKey"] = o.PublishedKey
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePublicGame struct {
	value *PublicGame
	isSet bool
}

func (v NullablePublicGame) Get() *PublicGame {
	return v.value
}

func (v *NullablePublicGame) Set(val *PublicGame) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicGame) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicGame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicGame(val *PublicGame) *NullablePublicGame {
	return &NullablePublicGame{value: val, isSet: true}
}

func (v NullablePublicGame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicGame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


