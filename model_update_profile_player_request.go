/*
MetaFab API

Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.5.1
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// UpdateProfilePlayerRequest struct for UpdateProfilePlayerRequest
type UpdateProfilePlayerRequest struct {
	// A properly formatted permissions object that validates against the MetaFab profile permissions schema.
	Permissions *map[string]ProfilePermissionsValue `json:"permissions,omitempty"`
}

// NewUpdateProfilePlayerRequest instantiates a new UpdateProfilePlayerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProfilePlayerRequest() *UpdateProfilePlayerRequest {
	this := UpdateProfilePlayerRequest{}
	return &this
}

// NewUpdateProfilePlayerRequestWithDefaults instantiates a new UpdateProfilePlayerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProfilePlayerRequestWithDefaults() *UpdateProfilePlayerRequest {
	this := UpdateProfilePlayerRequest{}
	return &this
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *UpdateProfilePlayerRequest) GetPermissions() map[string]ProfilePermissionsValue {
	if o == nil || isNil(o.Permissions) {
		var ret map[string]ProfilePermissionsValue
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProfilePlayerRequest) GetPermissionsOk() (*map[string]ProfilePermissionsValue, bool) {
	if o == nil || isNil(o.Permissions) {
    return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UpdateProfilePlayerRequest) HasPermissions() bool {
	if o != nil && !isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given map[string]ProfilePermissionsValue and assigns it to the Permissions field.
func (o *UpdateProfilePlayerRequest) SetPermissions(v map[string]ProfilePermissionsValue) {
	o.Permissions = &v
}

func (o UpdateProfilePlayerRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateProfilePlayerRequest struct {
	value *UpdateProfilePlayerRequest
	isSet bool
}

func (v NullableUpdateProfilePlayerRequest) Get() *UpdateProfilePlayerRequest {
	return v.value
}

func (v *NullableUpdateProfilePlayerRequest) Set(val *UpdateProfilePlayerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProfilePlayerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProfilePlayerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProfilePlayerRequest(val *UpdateProfilePlayerRequest) *NullableUpdateProfilePlayerRequest {
	return &NullableUpdateProfilePlayerRequest{value: val, isSet: true}
}

func (v NullableUpdateProfilePlayerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProfilePlayerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


