/*
MetaFab API

 Complete MetaFab API references and guides can be found at: https://trymetafab.com

API version: 1.4.0
Contact: metafabproject@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metafab

import (
	"encoding/json"
)

// UpdateGameRequest struct for UpdateGameRequest
type UpdateGameRequest struct {
	// A new name. Replaces the game's current name.
	Name *string `json:"name,omitempty"`
	// A new email address. The game's old email will no longer be valid for account authentication. `currentPassword` must also be provided.
	Email *string `json:"email,omitempty"`
	// The game's current password. Must be provided if setting `newPassword` or `email`.
	CurrentPassword *string `json:"currentPassword,omitempty"`
	// A new password. The game's old password will no longer be valid.
	NewPassword *string `json:"newPassword,omitempty"`
	// Sets a custom RPC for your game to use instead of MetaFab's default RPCs for the chain(s) you specify.  Expects a JSON object containing key value pairs of supported `chain` -> `rpc url`. Only the chain names provided as keys in the object will be explicitly overriden. To delete a custom RPC for your game, provide the chain name to delete as a key in the provided object and `null` as the value.  Set RPC example, `{ MATIC: 'https://polygon-rpc.com' }` Delete RPC example, `{ MATIC: null }`
	Rpcs *map[string]string `json:"rpcs,omitempty"`
	// An array of valid base redirect uris or exact uris that can be used for the redirect uri of various MetaFab features such as player login/registration and wallet connection.  Expects base or exact uris. For example, you could use include a uri of `https://trymetafab.com` and it would allow redirection to any valid uri on the domain, such as `https://trymetafab.com/play/game`.
	RedirectUris []string `json:"redirectUris,omitempty"`
	// A base64 string of the icon image for this game. Supported image formats are `jpg`, `jpeg`, `png`, `gif` Recommended size is 512x512 pixels, or 1:1 aspect ratio. This image is used for your auth/connect wallet flow and other MetaFab features for your game.
	IconImageBase64 *string `json:"iconImageBase64,omitempty"`
	// A base64 string of the cover image for this game. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size is 1600x1000 pixels, or 16:10 aspect ratio.  This image is used as the background image for your auth/connect wallet flow and other MetaFab features for your game.
	CoverImageBase64 *string `json:"coverImageBase64,omitempty"`
	// A valid hex color code. This color is used for your auth/connect wallet flow to control the color of buttons and other brandable MetaFab features for your game.
	PrimaryColorHex *string `json:"primaryColorHex,omitempty"`
	// Revokes the game's previous published key and returns a new one if true.
	ResetPublishedKey *bool `json:"resetPublishedKey,omitempty"`
	// Revokes the game's previous secret key and returns a new on if true.
	ResetSecretKey *bool `json:"resetSecretKey,omitempty"`
}

// NewUpdateGameRequest instantiates a new UpdateGameRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGameRequest() *UpdateGameRequest {
	this := UpdateGameRequest{}
	return &this
}

// NewUpdateGameRequestWithDefaults instantiates a new UpdateGameRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGameRequestWithDefaults() *UpdateGameRequest {
	this := UpdateGameRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateGameRequest) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateGameRequest) SetEmail(v string) {
	o.Email = &v
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetCurrentPassword() string {
	if o == nil || o.CurrentPassword == nil {
		var ret string
		return ret
	}
	return *o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetCurrentPasswordOk() (*string, bool) {
	if o == nil || o.CurrentPassword == nil {
		return nil, false
	}
	return o.CurrentPassword, true
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasCurrentPassword() bool {
	if o != nil && o.CurrentPassword != nil {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given string and assigns it to the CurrentPassword field.
func (o *UpdateGameRequest) SetCurrentPassword(v string) {
	o.CurrentPassword = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetNewPassword() string {
	if o == nil || o.NewPassword == nil {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil || o.NewPassword == nil {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasNewPassword() bool {
	if o != nil && o.NewPassword != nil {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *UpdateGameRequest) SetNewPassword(v string) {
	o.NewPassword = &v
}

// GetRpcs returns the Rpcs field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetRpcs() map[string]string {
	if o == nil || o.Rpcs == nil {
		var ret map[string]string
		return ret
	}
	return *o.Rpcs
}

// GetRpcsOk returns a tuple with the Rpcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetRpcsOk() (*map[string]string, bool) {
	if o == nil || o.Rpcs == nil {
		return nil, false
	}
	return o.Rpcs, true
}

// HasRpcs returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasRpcs() bool {
	if o != nil && o.Rpcs != nil {
		return true
	}

	return false
}

// SetRpcs gets a reference to the given map[string]string and assigns it to the Rpcs field.
func (o *UpdateGameRequest) SetRpcs(v map[string]string) {
	o.Rpcs = &v
}

// GetRedirectUris returns the RedirectUris field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetRedirectUris() []string {
	if o == nil || o.RedirectUris == nil {
		var ret []string
		return ret
	}
	return o.RedirectUris
}

// GetRedirectUrisOk returns a tuple with the RedirectUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetRedirectUrisOk() ([]string, bool) {
	if o == nil || o.RedirectUris == nil {
		return nil, false
	}
	return o.RedirectUris, true
}

// HasRedirectUris returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasRedirectUris() bool {
	if o != nil && o.RedirectUris != nil {
		return true
	}

	return false
}

// SetRedirectUris gets a reference to the given []string and assigns it to the RedirectUris field.
func (o *UpdateGameRequest) SetRedirectUris(v []string) {
	o.RedirectUris = v
}

// GetIconImageBase64 returns the IconImageBase64 field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetIconImageBase64() string {
	if o == nil || o.IconImageBase64 == nil {
		var ret string
		return ret
	}
	return *o.IconImageBase64
}

// GetIconImageBase64Ok returns a tuple with the IconImageBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetIconImageBase64Ok() (*string, bool) {
	if o == nil || o.IconImageBase64 == nil {
		return nil, false
	}
	return o.IconImageBase64, true
}

// HasIconImageBase64 returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasIconImageBase64() bool {
	if o != nil && o.IconImageBase64 != nil {
		return true
	}

	return false
}

// SetIconImageBase64 gets a reference to the given string and assigns it to the IconImageBase64 field.
func (o *UpdateGameRequest) SetIconImageBase64(v string) {
	o.IconImageBase64 = &v
}

// GetCoverImageBase64 returns the CoverImageBase64 field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetCoverImageBase64() string {
	if o == nil || o.CoverImageBase64 == nil {
		var ret string
		return ret
	}
	return *o.CoverImageBase64
}

// GetCoverImageBase64Ok returns a tuple with the CoverImageBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetCoverImageBase64Ok() (*string, bool) {
	if o == nil || o.CoverImageBase64 == nil {
		return nil, false
	}
	return o.CoverImageBase64, true
}

// HasCoverImageBase64 returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasCoverImageBase64() bool {
	if o != nil && o.CoverImageBase64 != nil {
		return true
	}

	return false
}

// SetCoverImageBase64 gets a reference to the given string and assigns it to the CoverImageBase64 field.
func (o *UpdateGameRequest) SetCoverImageBase64(v string) {
	o.CoverImageBase64 = &v
}

// GetPrimaryColorHex returns the PrimaryColorHex field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetPrimaryColorHex() string {
	if o == nil || o.PrimaryColorHex == nil {
		var ret string
		return ret
	}
	return *o.PrimaryColorHex
}

// GetPrimaryColorHexOk returns a tuple with the PrimaryColorHex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetPrimaryColorHexOk() (*string, bool) {
	if o == nil || o.PrimaryColorHex == nil {
		return nil, false
	}
	return o.PrimaryColorHex, true
}

// HasPrimaryColorHex returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasPrimaryColorHex() bool {
	if o != nil && o.PrimaryColorHex != nil {
		return true
	}

	return false
}

// SetPrimaryColorHex gets a reference to the given string and assigns it to the PrimaryColorHex field.
func (o *UpdateGameRequest) SetPrimaryColorHex(v string) {
	o.PrimaryColorHex = &v
}

// GetResetPublishedKey returns the ResetPublishedKey field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetResetPublishedKey() bool {
	if o == nil || o.ResetPublishedKey == nil {
		var ret bool
		return ret
	}
	return *o.ResetPublishedKey
}

// GetResetPublishedKeyOk returns a tuple with the ResetPublishedKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetResetPublishedKeyOk() (*bool, bool) {
	if o == nil || o.ResetPublishedKey == nil {
		return nil, false
	}
	return o.ResetPublishedKey, true
}

// HasResetPublishedKey returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasResetPublishedKey() bool {
	if o != nil && o.ResetPublishedKey != nil {
		return true
	}

	return false
}

// SetResetPublishedKey gets a reference to the given bool and assigns it to the ResetPublishedKey field.
func (o *UpdateGameRequest) SetResetPublishedKey(v bool) {
	o.ResetPublishedKey = &v
}

// GetResetSecretKey returns the ResetSecretKey field value if set, zero value otherwise.
func (o *UpdateGameRequest) GetResetSecretKey() bool {
	if o == nil || o.ResetSecretKey == nil {
		var ret bool
		return ret
	}
	return *o.ResetSecretKey
}

// GetResetSecretKeyOk returns a tuple with the ResetSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGameRequest) GetResetSecretKeyOk() (*bool, bool) {
	if o == nil || o.ResetSecretKey == nil {
		return nil, false
	}
	return o.ResetSecretKey, true
}

// HasResetSecretKey returns a boolean if a field has been set.
func (o *UpdateGameRequest) HasResetSecretKey() bool {
	if o != nil && o.ResetSecretKey != nil {
		return true
	}

	return false
}

// SetResetSecretKey gets a reference to the given bool and assigns it to the ResetSecretKey field.
func (o *UpdateGameRequest) SetResetSecretKey(v bool) {
	o.ResetSecretKey = &v
}

func (o UpdateGameRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.CurrentPassword != nil {
		toSerialize["currentPassword"] = o.CurrentPassword
	}
	if o.NewPassword != nil {
		toSerialize["newPassword"] = o.NewPassword
	}
	if o.Rpcs != nil {
		toSerialize["rpcs"] = o.Rpcs
	}
	if o.RedirectUris != nil {
		toSerialize["redirectUris"] = o.RedirectUris
	}
	if o.IconImageBase64 != nil {
		toSerialize["iconImageBase64"] = o.IconImageBase64
	}
	if o.CoverImageBase64 != nil {
		toSerialize["coverImageBase64"] = o.CoverImageBase64
	}
	if o.PrimaryColorHex != nil {
		toSerialize["primaryColorHex"] = o.PrimaryColorHex
	}
	if o.ResetPublishedKey != nil {
		toSerialize["resetPublishedKey"] = o.ResetPublishedKey
	}
	if o.ResetSecretKey != nil {
		toSerialize["resetSecretKey"] = o.ResetSecretKey
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateGameRequest struct {
	value *UpdateGameRequest
	isSet bool
}

func (v NullableUpdateGameRequest) Get() *UpdateGameRequest {
	return v.value
}

func (v *NullableUpdateGameRequest) Set(val *UpdateGameRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGameRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGameRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGameRequest(val *UpdateGameRequest) *NullableUpdateGameRequest {
	return &NullableUpdateGameRequest{value: val, isSet: true}
}

func (v NullableUpdateGameRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGameRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


